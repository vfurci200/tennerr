{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "state",
          "type": "bytes"
        }
      ],
      "name": "AgreementAccountStateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "name": "AgreementCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "penaltyAccount",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "AgreementLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidatorAccount",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "penaltyAccount",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bondAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bailoutAmount",
          "type": "uint256"
        }
      ],
      "name": "AgreementLiquidatedBy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "AgreementStateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "AgreementTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "name": "AgreementUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenHolder",
          "type": "address"
        }
      ],
      "name": "AuthorizedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bailoutAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bailoutAmount",
          "type": "uint256"
        }
      ],
      "name": "Bailout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "Burned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenHolder",
          "type": "address"
        }
      ],
      "name": "RevokedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "Sent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenDowngraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "authorizeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "name": "createAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultOperators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "downgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountActiveAgreements",
      "outputs": [
        {
          "internalType": "contract ISuperAgreement[]",
          "name": "activeAgreements",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "dataLength",
          "type": "uint256"
        }
      ],
      "name": "getAgreementData",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dataLength",
          "type": "uint256"
        }
      ],
      "name": "getAgreementStateSlot",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "slotData",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHost",
      "outputs": [
        {
          "internalType": "address",
          "name": "host",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnderlyingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "granularity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "underlyingDecimals",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "n",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "s",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "isAccountCritical",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isCritical",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAccountCriticalNow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isCritical",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "isAccountSolvent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSolvent",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAccountSolventNow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSolvent",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenHolder",
          "type": "address"
        }
      ],
      "name": "isOperatorFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "penaltyAccount",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bailoutAmount",
          "type": "uint256"
        }
      ],
      "name": "makeLiquidationPayouts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "operationApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "operationDowngrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "operationTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "operationUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "operatorBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "operatorSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "realtimeBalanceOf",
      "outputs": [
        {
          "internalType": "int256",
          "name": "availableBalance",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "owedDeposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "realtimeBalanceOfNow",
      "outputs": [
        {
          "internalType": "int256",
          "name": "availableBalance",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "owedDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "revokeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "selfBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "selfMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "delta",
          "type": "int256"
        }
      ],
      "name": "settleBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "dataLength",
          "type": "uint256"
        }
      ],
      "name": "terminateAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "transferAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "name": "updateAgreementData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "slotData",
          "type": "bytes32[]"
        }
      ],
      "name": "updateAgreementStateSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "30": "/Users/vince/.brownie/packages/superfluid-finance/superfluid@1.0.0/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
    "32": "/Users/vince/.brownie/packages/superfluid-finance/superfluid@1.0.0/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
    "36": "/Users/vince/.brownie/packages/superfluid-finance/superfluid@1.0.0/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
    "38": "/Users/vince/.brownie/packages/superfluid-finance/superfluid@1.0.0/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
    "6": "/Users/vince/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/IERC20.sol",
    "8": "/Users/vince/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC777/IERC777.sol"
  },
  "ast": {
    "absolutePath": "/Users/vince/.brownie/packages/superfluid-finance/superfluid@1.0.0/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
    "exportedSymbols": {
      "ISuperToken": [
        10940
      ]
    },
    "id": 10941,
    "license": "AGPLv3",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 10589,
        "literals": [
          "solidity",
          ">=",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "35:25:32"
      },
      {
        "absolutePath": "/Users/vince/.brownie/packages/superfluid-finance/superfluid@1.0.0/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
        "file": "./ISuperfluid.sol",
        "id": 10591,
        "nodeType": "ImportDirective",
        "scope": 10941,
        "sourceUnit": 7708,
        "src": "62:48:32",
        "symbolAliases": [
          {
            "foreign": {
              "id": 10590,
              "name": "ISuperfluid",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "71:11:32",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/vince/.brownie/packages/superfluid-finance/superfluid@1.0.0/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
        "file": "./ISuperfluidToken.sol",
        "id": 10593,
        "nodeType": "ImportDirective",
        "scope": 10941,
        "sourceUnit": 10026,
        "src": "111:58:32",
        "symbolAliases": [
          {
            "foreign": {
              "id": 10592,
              "name": "ISuperfluidToken",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "120:16:32",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/vince/.brownie/packages/superfluid-finance/superfluid@1.0.0/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
        "file": "../tokens/TokenInfo.sol",
        "id": 10595,
        "nodeType": "ImportDirective",
        "scope": 10941,
        "sourceUnit": 11118,
        "src": "170:52:32",
        "symbolAliases": [
          {
            "foreign": {
              "id": 10594,
              "name": "TokenInfo",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "179:9:32",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/vince/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC777/IERC777.sol",
        "file": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
        "id": 10597,
        "nodeType": "ImportDirective",
        "scope": 10941,
        "sourceUnit": 10185,
        "src": "223:75:32",
        "symbolAliases": [
          {
            "foreign": {
              "id": 10596,
              "name": "IERC777",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "232:7:32",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/vince/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "id": 10599,
        "nodeType": "ImportDirective",
        "scope": 10941,
        "sourceUnit": 4607,
        "src": "299:72:32",
        "symbolAliases": [
          {
            "foreign": {
              "id": 10598,
              "name": "IERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "308:6:32",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 10601,
              "name": "ISuperfluidToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 10025,
              "src": "512:16:32",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ISuperfluidToken_$10025",
                "typeString": "contract ISuperfluidToken"
              }
            },
            "id": 10602,
            "nodeType": "InheritanceSpecifier",
            "src": "512:16:32"
          },
          {
            "baseName": {
              "id": 10603,
              "name": "TokenInfo",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 11117,
              "src": "530:9:32",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TokenInfo_$11117",
                "typeString": "contract TokenInfo"
              }
            },
            "id": 10604,
            "nodeType": "InheritanceSpecifier",
            "src": "530:9:32"
          },
          {
            "baseName": {
              "id": 10605,
              "name": "IERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4606,
              "src": "541:6:32",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC20_$4606",
                "typeString": "contract IERC20"
              }
            },
            "id": 10606,
            "nodeType": "InheritanceSpecifier",
            "src": "541:6:32"
          },
          {
            "baseName": {
              "id": 10607,
              "name": "IERC777",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 10184,
              "src": "549:7:32",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC777_$10184",
                "typeString": "contract IERC777"
              }
            },
            "id": 10608,
            "nodeType": "InheritanceSpecifier",
            "src": "549:7:32"
          }
        ],
        "contractDependencies": [
          4606,
          10025,
          10184,
          11117
        ],
        "contractKind": "interface",
        "documentation": {
          "id": 10600,
          "nodeType": "StructuredDocumentation",
          "src": "373:113:32",
          "text": " @title Superfluid's super token (Superfluid Token + ERC20 + ERC777) interface\n @author Superfluid"
        },
        "fullyImplemented": false,
        "id": 10940,
        "linearizedBaseContracts": [
          10940,
          10184,
          4606,
          11117,
          10025
        ],
        "name": "ISuperToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 10609,
              "nodeType": "StructuredDocumentation",
              "src": "564:32:32",
              "text": "@dev Initialize the contract"
            },
            "functionSelector": "42fe0980",
            "id": 10620,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10618,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10611,
                  "mutability": "mutable",
                  "name": "underlyingToken",
                  "nodeType": "VariableDeclaration",
                  "scope": 10620,
                  "src": "630:22:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$4606",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 10610,
                    "name": "IERC20",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 4606,
                    "src": "630:6:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$4606",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10613,
                  "mutability": "mutable",
                  "name": "underlyingDecimals",
                  "nodeType": "VariableDeclaration",
                  "scope": 10620,
                  "src": "662:24:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 10612,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "662:5:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10615,
                  "mutability": "mutable",
                  "name": "n",
                  "nodeType": "VariableDeclaration",
                  "scope": 10620,
                  "src": "696:17:32",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 10614,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "696:6:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10617,
                  "mutability": "mutable",
                  "name": "s",
                  "nodeType": "VariableDeclaration",
                  "scope": 10620,
                  "src": "723:17:32",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 10616,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "723:6:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "620:126:32"
            },
            "returnParameters": {
              "id": 10619,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "755:0:32"
            },
            "scope": 10940,
            "src": "601:155:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10034,
              11104
            ],
            "documentation": {
              "id": 10621,
              "nodeType": "StructuredDocumentation",
              "src": "947:54:32",
              "text": " @dev Returns the name of the token."
            },
            "functionSelector": "06fdde03",
            "id": 10629,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 10625,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 10623,
                  "name": "IERC777",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 10184,
                  "src": "1045:7:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC777_$10184",
                    "typeString": "contract IERC777"
                  }
                },
                {
                  "id": 10624,
                  "name": "TokenInfo",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 11117,
                  "src": "1054:9:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_TokenInfo_$11117",
                    "typeString": "contract TokenInfo"
                  }
                }
              ],
              "src": "1036:28:32"
            },
            "parameters": {
              "id": 10622,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1019:2:32"
            },
            "returnParameters": {
              "id": 10628,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10627,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 10629,
                  "src": "1074:13:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 10626,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1074:6:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1073:15:32"
            },
            "scope": 10940,
            "src": "1006:83:32",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10040,
              11110
            ],
            "documentation": {
              "id": 10630,
              "nodeType": "StructuredDocumentation",
              "src": "1095:102:32",
              "text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
            },
            "functionSelector": "95d89b41",
            "id": 10638,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 10634,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 10632,
                  "name": "IERC777",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 10184,
                  "src": "1243:7:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC777_$10184",
                    "typeString": "contract IERC777"
                  }
                },
                {
                  "id": 10633,
                  "name": "TokenInfo",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 11117,
                  "src": "1252:9:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_TokenInfo_$11117",
                    "typeString": "contract TokenInfo"
                  }
                }
              ],
              "src": "1234:28:32"
            },
            "parameters": {
              "id": 10631,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1217:2:32"
            },
            "returnParameters": {
              "id": 10637,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10636,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 10638,
                  "src": "1272:13:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 10635,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1272:6:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1271:15:32"
            },
            "scope": 10940,
            "src": "1202:85:32",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              11116
            ],
            "documentation": {
              "id": 10639,
              "nodeType": "StructuredDocumentation",
              "src": "1293:668:32",
              "text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5,05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n called.\n NOTE: SuperToken always uses 18 decimals.\n Note: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
            },
            "functionSelector": "313ce567",
            "id": 10646,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "decimals",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 10642,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 10641,
                  "name": "TokenInfo",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 11117,
                  "src": "2009:9:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_TokenInfo_$11117",
                    "typeString": "contract TokenInfo"
                  }
                }
              ],
              "src": "2000:19:32"
            },
            "parameters": {
              "id": 10640,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1983:2:32"
            },
            "returnParameters": {
              "id": 10645,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10644,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 10646,
                  "src": "2029:5:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 10643,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "2029:5:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2028:7:32"
            },
            "scope": 10940,
            "src": "1966:70:32",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              4537,
              10052
            ],
            "documentation": {
              "id": 10647,
              "nodeType": "StructuredDocumentation",
              "src": "2223:49:32",
              "text": " @dev See {IERC20-totalSupply}."
            },
            "functionSelector": "18160ddd",
            "id": 10655,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "totalSupply",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 10651,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 10649,
                  "name": "IERC777",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 10184,
                  "src": "2323:7:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC777_$10184",
                    "typeString": "contract IERC777"
                  }
                },
                {
                  "id": 10650,
                  "name": "IERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 4606,
                  "src": "2332:6:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$4606",
                    "typeString": "contract IERC20"
                  }
                }
              ],
              "src": "2314:25:32"
            },
            "parameters": {
              "id": 10648,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2297:2:32"
            },
            "returnParameters": {
              "id": 10654,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10653,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 10655,
                  "src": "2349:7:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10652,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2349:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2348:9:32"
            },
            "scope": 10940,
            "src": "2277:81:32",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              4545,
              10060
            ],
            "documentation": {
              "id": 10656,
              "nodeType": "StructuredDocumentation",
              "src": "2364:83:32",
              "text": " @dev Returns the amount of tokens owned by an account (`owner`)."
            },
            "functionSelector": "70a08231",
            "id": 10666,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 10662,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 10660,
                  "name": "IERC777",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 10184,
                  "src": "2511:7:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC777_$10184",
                    "typeString": "contract IERC777"
                  }
                },
                {
                  "id": 10661,
                  "name": "IERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 4606,
                  "src": "2520:6:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$4606",
                    "typeString": "contract IERC20"
                  }
                }
              ],
              "src": "2502:25:32"
            },
            "parameters": {
              "id": 10659,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10658,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 10666,
                  "src": "2471:15:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10657,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2471:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2470:17:32"
            },
            "returnParameters": {
              "id": 10665,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10664,
                  "mutability": "mutable",
                  "name": "balance",
                  "nodeType": "VariableDeclaration",
                  "scope": 10666,
                  "src": "2536:15:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10663,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2536:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2535:17:32"
            },
            "scope": 10940,
            "src": "2452:101:32",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              4555
            ],
            "documentation": {
              "id": 10667,
              "nodeType": "StructuredDocumentation",
              "src": "2731:209:32",
              "text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
            },
            "functionSelector": "a9059cbb",
            "id": 10678,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transfer",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 10674,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 10673,
                  "name": "IERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 4606,
                  "src": "3016:6:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$4606",
                    "typeString": "contract IERC20"
                  }
                }
              ],
              "src": "3007:16:32"
            },
            "parameters": {
              "id": 10672,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10669,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 10678,
                  "src": "2963:17:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10668,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2963:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10671,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10678,
                  "src": "2982:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10670,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2982:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2962:35:32"
            },
            "returnParameters": {
              "id": 10677,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10676,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 10678,
                  "src": "3033:4:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 10675,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3033:4:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3032:6:32"
            },
            "scope": 10940,
            "src": "2945:94:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              4565
            ],
            "documentation": {
              "id": 10679,
              "nodeType": "StructuredDocumentation",
              "src": "3045:264:32",
              "text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
            },
            "functionSelector": "dd62ed3e",
            "id": 10690,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "allowance",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 10686,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 10685,
                  "name": "IERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 4606,
                  "src": "3383:6:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$4606",
                    "typeString": "contract IERC20"
                  }
                }
              ],
              "src": "3374:16:32"
            },
            "parameters": {
              "id": 10684,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10681,
                  "mutability": "mutable",
                  "name": "owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 10690,
                  "src": "3333:13:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10680,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3333:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10683,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 10690,
                  "src": "3348:15:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10682,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3348:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3332:32:32"
            },
            "returnParameters": {
              "id": 10689,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10688,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 10690,
                  "src": "3405:7:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10687,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3405:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3404:9:32"
            },
            "scope": 10940,
            "src": "3314:100:32",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              4575
            ],
            "documentation": {
              "id": 10691,
              "nodeType": "StructuredDocumentation",
              "src": "3420:642:32",
              "text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
            },
            "functionSelector": "095ea7b3",
            "id": 10702,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 10698,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 10697,
                  "name": "IERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 4606,
                  "src": "4135:6:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$4606",
                    "typeString": "contract IERC20"
                  }
                }
              ],
              "src": "4126:16:32"
            },
            "parameters": {
              "id": 10696,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10693,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 10702,
                  "src": "4084:15:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10692,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4084:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10695,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10702,
                  "src": "4101:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10694,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4101:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4083:33:32"
            },
            "returnParameters": {
              "id": 10701,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10700,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 10702,
                  "src": "4152:4:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 10699,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4152:4:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4151:6:32"
            },
            "scope": 10940,
            "src": "4067:91:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              4587
            ],
            "documentation": {
              "id": 10703,
              "nodeType": "StructuredDocumentation",
              "src": "4164:296:32",
              "text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
            },
            "functionSelector": "23b872dd",
            "id": 10716,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferFrom",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 10712,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 10711,
                  "name": "IERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 4606,
                  "src": "4556:6:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$4606",
                    "typeString": "contract IERC20"
                  }
                }
              ],
              "src": "4547:16:32"
            },
            "parameters": {
              "id": 10710,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10705,
                  "mutability": "mutable",
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 10716,
                  "src": "4487:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10704,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4487:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10707,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 10716,
                  "src": "4503:17:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10706,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4503:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10709,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10716,
                  "src": "4522:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10708,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4522:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4486:51:32"
            },
            "returnParameters": {
              "id": 10715,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10714,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 10716,
                  "src": "4573:4:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 10713,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4573:4:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4572:6:32"
            },
            "scope": 10940,
            "src": "4465:114:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10717,
              "nodeType": "StructuredDocumentation",
              "src": "4585:384:32",
              "text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
            },
            "functionSelector": "39509351",
            "id": 10726,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "increaseAllowance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10722,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10719,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 10726,
                  "src": "5001:15:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10718,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5001:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10721,
                  "mutability": "mutable",
                  "name": "addedValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 10726,
                  "src": "5018:18:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10720,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5018:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5000:37:32"
            },
            "returnParameters": {
              "id": 10725,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10724,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 10726,
                  "src": "5056:4:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 10723,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5056:4:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5055:6:32"
            },
            "scope": 10940,
            "src": "4974:88:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10727,
              "nodeType": "StructuredDocumentation",
              "src": "5068:476:32",
              "text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
            },
            "functionSelector": "a457c2d7",
            "id": 10736,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "decreaseAllowance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10732,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10729,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 10736,
                  "src": "5577:15:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10728,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5577:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10731,
                  "mutability": "mutable",
                  "name": "subtractedValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 10736,
                  "src": "5594:23:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10730,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5594:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5576:42:32"
            },
            "returnParameters": {
              "id": 10735,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10734,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 10736,
                  "src": "5637:4:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 10733,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5637:4:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5636:6:32"
            },
            "scope": 10940,
            "src": "5550:93:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10046
            ],
            "documentation": {
              "id": 10737,
              "nodeType": "StructuredDocumentation",
              "src": "5822:286:32",
              "text": " @dev Returns the smallest part of the token that is not divisible. This\n means all token operations (creation, movement and destruction) must have\n amounts that are a multiple of this number.\n For super token contracts, this value is 1 always"
            },
            "functionSelector": "556f0dc7",
            "id": 10744,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "granularity",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 10740,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 10739,
                  "name": "IERC777",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 10184,
                  "src": "6159:7:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC777_$10184",
                    "typeString": "contract IERC777"
                  }
                }
              ],
              "src": "6150:17:32"
            },
            "parameters": {
              "id": 10738,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6133:2:32"
            },
            "returnParameters": {
              "id": 10743,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10742,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 10744,
                  "src": "6177:7:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10741,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6177:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6176:9:32"
            },
            "scope": 10940,
            "src": "6113:73:32",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10070
            ],
            "documentation": {
              "id": 10745,
              "nodeType": "StructuredDocumentation",
              "src": "6192:585:32",
              "text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n If send or receive hooks are registered for the caller and `recipient`,\n the corresponding functions will be called with `data` and empty\n `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n Emits a {Sent} event.\n Requirements\n - the caller must have at least `amount` tokens.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
            },
            "functionSelector": "9bd9bbc6",
            "id": 10756,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "send",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 10754,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 10753,
                  "name": "IERC777",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 10184,
                  "src": "6870:7:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC777_$10184",
                    "typeString": "contract IERC777"
                  }
                }
              ],
              "src": "6861:17:32"
            },
            "parameters": {
              "id": 10752,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10747,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 10756,
                  "src": "6796:17:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10746,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6796:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10749,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10756,
                  "src": "6815:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10748,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6815:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10751,
                  "mutability": "mutable",
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "scope": 10756,
                  "src": "6831:19:32",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 10750,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "6831:5:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6795:56:32"
            },
            "returnParameters": {
              "id": 10755,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6878:0:32"
            },
            "scope": 10940,
            "src": "6782:97:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10078
            ],
            "documentation": {
              "id": 10757,
              "nodeType": "StructuredDocumentation",
              "src": "6885:404:32",
              "text": " @dev Destroys `amount` tokens from the caller's account, reducing the\n total supply.\n If a send hook is registered for the caller, the corresponding function\n will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n Emits a {Burned} event.\n Requirements\n - the caller must have at least `amount` tokens."
            },
            "functionSelector": "fe9d9303",
            "id": 10766,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 10764,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 10763,
                  "name": "IERC777",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 10184,
                  "src": "7363:7:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC777_$10184",
                    "typeString": "contract IERC777"
                  }
                }
              ],
              "src": "7354:17:32"
            },
            "parameters": {
              "id": 10762,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10759,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10766,
                  "src": "7308:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10758,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7308:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10761,
                  "mutability": "mutable",
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "scope": 10766,
                  "src": "7324:19:32",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 10760,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "7324:5:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7307:37:32"
            },
            "returnParameters": {
              "id": 10765,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7371:0:32"
            },
            "scope": 10940,
            "src": "7294:78:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10088
            ],
            "documentation": {
              "id": 10767,
              "nodeType": "StructuredDocumentation",
              "src": "7378:249:32",
              "text": " @dev Returns true if an account is an operator of `tokenHolder`.\n Operators can send and burn tokens on behalf of their owners. All\n accounts are their own operator.\n See {operatorSend} and {operatorBurn}."
            },
            "functionSelector": "d95b6371",
            "id": 10778,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isOperatorFor",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 10774,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 10773,
                  "name": "IERC777",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 10184,
                  "src": "7712:7:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC777_$10184",
                    "typeString": "contract IERC777"
                  }
                }
              ],
              "src": "7703:17:32"
            },
            "parameters": {
              "id": 10772,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10769,
                  "mutability": "mutable",
                  "name": "operator",
                  "nodeType": "VariableDeclaration",
                  "scope": 10778,
                  "src": "7655:16:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10768,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7655:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10771,
                  "mutability": "mutable",
                  "name": "tokenHolder",
                  "nodeType": "VariableDeclaration",
                  "scope": 10778,
                  "src": "7673:19:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10770,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7673:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7654:39:32"
            },
            "returnParameters": {
              "id": 10777,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10776,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 10778,
                  "src": "7735:4:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 10775,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7735:4:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7734:6:32"
            },
            "scope": 10940,
            "src": "7632:109:32",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10094
            ],
            "documentation": {
              "id": 10779,
              "nodeType": "StructuredDocumentation",
              "src": "7747:233:32",
              "text": " @dev Make an account an operator of the caller.\n See {isOperatorFor}.\n Emits an {AuthorizedOperator} event.\n Requirements\n - `operator` cannot be calling address."
            },
            "functionSelector": "959b8c3f",
            "id": 10786,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "authorizeOperator",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 10784,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 10783,
                  "name": "IERC777",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 10184,
                  "src": "8048:7:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC777_$10184",
                    "typeString": "contract IERC777"
                  }
                }
              ],
              "src": "8039:17:32"
            },
            "parameters": {
              "id": 10782,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10781,
                  "mutability": "mutable",
                  "name": "operator",
                  "nodeType": "VariableDeclaration",
                  "scope": 10786,
                  "src": "8012:16:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10780,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8012:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8011:18:32"
            },
            "returnParameters": {
              "id": 10785,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8056:0:32"
            },
            "scope": 10940,
            "src": "7985:72:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10100
            ],
            "documentation": {
              "id": 10787,
              "nodeType": "StructuredDocumentation",
              "src": "8063:261:32",
              "text": " @dev Revoke an account's operator status for the caller.\n See {isOperatorFor} and {defaultOperators}.\n Emits a {RevokedOperator} event.\n Requirements\n - `operator` cannot be calling address."
            },
            "functionSelector": "fad8b32a",
            "id": 10794,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "revokeOperator",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 10792,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 10791,
                  "name": "IERC777",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 10184,
                  "src": "8389:7:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC777_$10184",
                    "typeString": "contract IERC777"
                  }
                }
              ],
              "src": "8380:17:32"
            },
            "parameters": {
              "id": 10790,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10789,
                  "mutability": "mutable",
                  "name": "operator",
                  "nodeType": "VariableDeclaration",
                  "scope": 10794,
                  "src": "8353:16:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10788,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8353:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8352:18:32"
            },
            "returnParameters": {
              "id": 10793,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8397:0:32"
            },
            "scope": 10940,
            "src": "8329:69:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10107
            ],
            "documentation": {
              "id": 10795,
              "nodeType": "StructuredDocumentation",
              "src": "8404:338:32",
              "text": " @dev Returns the list of default operators. These accounts are operators\n for all token holders, even if {authorizeOperator} was never called on\n them.\n This list is immutable, but individual holders may revoke these via\n {revokeOperator}, in which case {isOperatorFor} will return false."
            },
            "functionSelector": "06e48538",
            "id": 10803,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "defaultOperators",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 10798,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 10797,
                  "name": "IERC777",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 10184,
                  "src": "8793:7:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC777_$10184",
                    "typeString": "contract IERC777"
                  }
                }
              ],
              "src": "8784:17:32"
            },
            "parameters": {
              "id": 10796,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8772:2:32"
            },
            "returnParameters": {
              "id": 10802,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10801,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 10803,
                  "src": "8816:16:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 10799,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8816:7:32",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 10800,
                    "nodeType": "ArrayTypeName",
                    "src": "8816:9:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8815:18:32"
            },
            "scope": 10940,
            "src": "8747:87:32",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10121
            ],
            "documentation": {
              "id": 10804,
              "nodeType": "StructuredDocumentation",
              "src": "8840:714:32",
              "text": " @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n be an operator of `sender`.\n If send or receive hooks are registered for `sender` and `recipient`,\n the corresponding functions will be called with `data` and\n `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n Emits a {Sent} event.\n Requirements\n - `sender` cannot be the zero address.\n - `sender` must have at least `amount` tokens.\n - the caller must be an operator for `sender`.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
            },
            "functionSelector": "62ad1b83",
            "id": 10819,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "operatorSend",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 10817,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 10816,
                  "name": "IERC777",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 10184,
                  "src": "9746:7:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC777_$10184",
                    "typeString": "contract IERC777"
                  }
                }
              ],
              "src": "9737:17:32"
            },
            "parameters": {
              "id": 10815,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10806,
                  "mutability": "mutable",
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 10819,
                  "src": "9590:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10805,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9590:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10808,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 10819,
                  "src": "9614:17:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10807,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9614:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10810,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10819,
                  "src": "9641:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10809,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9641:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10812,
                  "mutability": "mutable",
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "scope": 10819,
                  "src": "9665:19:32",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 10811,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "9665:5:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10814,
                  "mutability": "mutable",
                  "name": "operatorData",
                  "nodeType": "VariableDeclaration",
                  "scope": 10819,
                  "src": "9694:27:32",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 10813,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "9694:5:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9580:147:32"
            },
            "returnParameters": {
              "id": 10818,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9754:0:32"
            },
            "scope": 10940,
            "src": "9559:196:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10133
            ],
            "documentation": {
              "id": 10820,
              "nodeType": "StructuredDocumentation",
              "src": "9761:532:32",
              "text": " @dev Destroys `amount` tokens from `account`, reducing the total supply.\n The caller must be an operator of `account`.\n If a send hook is registered for `account`, the corresponding function\n will be called with `data` and `operatorData`. See {IERC777Sender}.\n Emits a {Burned} event.\n Requirements\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens.\n - the caller must be an operator for `account`."
            },
            "functionSelector": "fc673c4f",
            "id": 10833,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "operatorBurn",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 10831,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 10830,
                  "name": "IERC777",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 10184,
                  "src": "10459:7:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC777_$10184",
                    "typeString": "contract IERC777"
                  }
                }
              ],
              "src": "10450:17:32"
            },
            "parameters": {
              "id": 10829,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10822,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 10833,
                  "src": "10329:15:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10821,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10329:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10824,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10833,
                  "src": "10354:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10823,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10354:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10826,
                  "mutability": "mutable",
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "scope": 10833,
                  "src": "10378:19:32",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 10825,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "10378:5:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10828,
                  "mutability": "mutable",
                  "name": "operatorData",
                  "nodeType": "VariableDeclaration",
                  "scope": 10833,
                  "src": "10407:27:32",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 10827,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "10407:5:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10319:121:32"
            },
            "returnParameters": {
              "id": 10832,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10467:0:32"
            },
            "scope": 10940,
            "src": "10298:170:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10834,
              "nodeType": "StructuredDocumentation",
              "src": "10676:99:32",
              "text": " @dev Mint new tokens for the account\n Modifiers:\n  - onlySelf"
            },
            "functionSelector": "c68d4283",
            "id": 10843,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "selfMint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10841,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10836,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 10843,
                  "src": "10807:15:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10835,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10807:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10838,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10843,
                  "src": "10832:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10837,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10832:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10840,
                  "mutability": "mutable",
                  "name": "userData",
                  "nodeType": "VariableDeclaration",
                  "scope": 10843,
                  "src": "10856:21:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 10839,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "10856:5:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10797:86:32"
            },
            "returnParameters": {
              "id": 10842,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10892:0:32"
            },
            "scope": 10940,
            "src": "10780:113:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10844,
              "nodeType": "StructuredDocumentation",
              "src": "10898:99:32",
              "text": " @dev Burn existing tokens for the account\n Modifiers:\n  - onlySelf"
            },
            "functionSelector": "9d876741",
            "id": 10853,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "selfBurn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10851,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10846,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 10853,
                  "src": "11027:15:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10845,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11027:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10848,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10853,
                  "src": "11051:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10847,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11051:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10850,
                  "mutability": "mutable",
                  "name": "userData",
                  "nodeType": "VariableDeclaration",
                  "scope": 10853,
                  "src": "11074:21:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 10849,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "11074:5:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11018:82:32"
            },
            "returnParameters": {
              "id": 10852,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11109:0:32"
            },
            "scope": 10940,
            "src": "11001:109:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10854,
              "nodeType": "StructuredDocumentation",
              "src": "11311:87:32",
              "text": " @dev Transfer all available balance from `msg.sender` to `recipient`"
            },
            "functionSelector": "a3a7e7f3",
            "id": 10859,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferAll",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10857,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10856,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 10859,
                  "src": "11424:17:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10855,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11424:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11423:19:32"
            },
            "returnParameters": {
              "id": 10858,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11451:0:32"
            },
            "scope": 10940,
            "src": "11403:49:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10860,
              "nodeType": "StructuredDocumentation",
              "src": "11641:110:32",
              "text": " @dev Return the underlying token contract\n @return tokenAddr Underlying token address"
            },
            "functionSelector": "ee719bc8",
            "id": 10865,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getUnderlyingToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10861,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11783:2:32"
            },
            "returnParameters": {
              "id": 10864,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10863,
                  "mutability": "mutable",
                  "name": "tokenAddr",
                  "nodeType": "VariableDeclaration",
                  "scope": 10865,
                  "src": "11808:17:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10862,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11808:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11807:19:32"
            },
            "scope": 10940,
            "src": "11756:71:32",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10866,
              "nodeType": "StructuredDocumentation",
              "src": "11833:259:32",
              "text": " @dev Upgrade ERC20 to SuperToken.\n @param amount Number of tokens to be upgraded (in 18 decimals)\n NOTE: It will use \u00b4transferFrom\u00b4 to get tokens. Before calling this\n function you should \u00b4approve\u00b4 this contract"
            },
            "functionSelector": "45977d03",
            "id": 10871,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "upgrade",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10869,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10868,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10871,
                  "src": "12114:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10867,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12114:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12113:16:32"
            },
            "returnParameters": {
              "id": 10870,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12138:0:32"
            },
            "scope": 10940,
            "src": "12097:42:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10872,
              "nodeType": "StructuredDocumentation",
              "src": "12145:402:32",
              "text": " @dev Upgrade ERC20 to SuperToken and transfer immediately\n @param to The account to received upgraded tokens\n @param amount Number of tokens to be upgraded (in 18 decimals)\n @param data User data for the TokensRecipient callback\n NOTE: It will use \u00b4transferFrom\u00b4 to get tokens. Before calling this\n function you should \u00b4approve\u00b4 this contract"
            },
            "functionSelector": "5b9d09cc",
            "id": 10881,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "upgradeTo",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10879,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10874,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 10881,
                  "src": "12571:10:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10873,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12571:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10876,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10881,
                  "src": "12583:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10875,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12583:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10878,
                  "mutability": "mutable",
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "scope": 10881,
                  "src": "12599:19:32",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 10877,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "12599:5:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12570:49:32"
            },
            "returnParameters": {
              "id": 10880,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12628:0:32"
            },
            "scope": 10940,
            "src": "12552:77:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 10882,
              "nodeType": "StructuredDocumentation",
              "src": "12635:166:32",
              "text": " @dev Token upgrade event\n @param account Account where tokens are upgraded to\n @param amount Amount of tokens upgraded (in 18 decimals)"
            },
            "id": 10888,
            "name": "TokenUpgraded",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 10887,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10884,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 10888,
                  "src": "12835:23:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10883,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12835:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10886,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10888,
                  "src": "12868:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10885,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12868:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12825:63:32"
            },
            "src": "12806:83:32"
          },
          {
            "documentation": {
              "id": 10889,
              "nodeType": "StructuredDocumentation",
              "src": "12895:158:32",
              "text": " @dev Downgrade SuperToken to ERC20.\n @dev It will call transfer to send tokens\n @param amount Number of tokens to be downgraded"
            },
            "functionSelector": "11bcc81e",
            "id": 10894,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "downgrade",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10892,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10891,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10894,
                  "src": "13077:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10890,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13077:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13076:16:32"
            },
            "returnParameters": {
              "id": 10893,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13101:0:32"
            },
            "scope": 10940,
            "src": "13058:44:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 10895,
              "nodeType": "StructuredDocumentation",
              "src": "13108:150:32",
              "text": " @dev Token downgrade event\n @param account Account whose tokens are upgraded\n @param amount Amount of tokens downgraded"
            },
            "id": 10901,
            "name": "TokenDowngraded",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 10900,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10897,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 10901,
                  "src": "13294:23:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10896,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13294:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10899,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10901,
                  "src": "13327:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10898,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13327:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13284:63:32"
            },
            "src": "13263:85:32"
          },
          {
            "documentation": {
              "id": 10902,
              "nodeType": "StructuredDocumentation",
              "src": "13537:269:32",
              "text": " @dev Perform ERC20 approve by host contract.\n @param account The account owner to be approved.\n @param spender The spender of account owner's funds.\n @param amount Number of tokens to be approved.\n Modifiers:\n  - onlyHost"
            },
            "functionSelector": "62aa5287",
            "id": 10911,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "operationApprove",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10909,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10904,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 10911,
                  "src": "13846:15:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10903,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13846:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10906,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 10911,
                  "src": "13871:15:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10905,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13871:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10908,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10911,
                  "src": "13896:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10907,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13896:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13836:80:32"
            },
            "returnParameters": {
              "id": 10910,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13925:0:32"
            },
            "scope": 10940,
            "src": "13811:115:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10912,
              "nodeType": "StructuredDocumentation",
              "src": "13932:336:32",
              "text": " @dev Perform ERC20 transfer from by host contract.\n @param account The account to spend sender's funds.\n @param spender  The account where the funds is sent from.\n @param recipient The recipient of thefunds.\n @param amount Number of tokens to be transferred.\n Modifiers:\n  - onlyHost"
            },
            "functionSelector": "16d055d6",
            "id": 10923,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "operationTransferFrom",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10921,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10914,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 10923,
                  "src": "14313:15:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10913,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14313:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10916,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 10923,
                  "src": "14338:15:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10915,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14338:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10918,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 10923,
                  "src": "14363:17:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10917,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14363:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10920,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10923,
                  "src": "14390:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10919,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14390:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14303:107:32"
            },
            "returnParameters": {
              "id": 10922,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14419:0:32"
            },
            "scope": 10940,
            "src": "14273:147:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10924,
              "nodeType": "StructuredDocumentation",
              "src": "14426:225:32",
              "text": " @dev Upgrade ERC20 to SuperToken by host contract.\n @param account The account to be changed.\n @param amount Number of tokens to be upgraded (in 18 decimals)\n Modifiers:\n  - onlyHost"
            },
            "functionSelector": "ca789464",
            "id": 10931,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "operationUpgrade",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10929,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10926,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 10931,
                  "src": "14682:15:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10925,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14682:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10928,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10931,
                  "src": "14699:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10927,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14699:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14681:33:32"
            },
            "returnParameters": {
              "id": 10930,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14723:0:32"
            },
            "scope": 10940,
            "src": "14656:68:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10932,
              "nodeType": "StructuredDocumentation",
              "src": "14730:229:32",
              "text": " @dev Downgrade ERC20 to SuperToken by host contract.\n @param account The account to be changed.\n @param amount Number of tokens to be downgraded (in 18 decimals)\n Modifiers:\n  - onlyHost"
            },
            "functionSelector": "245887fc",
            "id": 10939,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "operationDowngrade",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10937,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10934,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 10939,
                  "src": "14992:15:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10933,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14992:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10936,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10939,
                  "src": "15009:14:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10935,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15009:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14991:33:32"
            },
            "returnParameters": {
              "id": 10938,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15033:0:32"
            },
            "scope": 10940,
            "src": "14964:70:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 10941,
        "src": "487:15077:32"
      }
    ],
    "src": "35:15530:32"
  },
  "bytecode": "",
  "bytecodeSha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.7.1+commit.f4a555be"
  },
  "contractName": "ISuperToken",
  "coverageMap": {
    "branches": {},
    "statements": {}
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@3.4.0/IERC20",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/IERC777",
    "superfluid-finance/superfluid@1.0.0/ISuperAgreement",
    "superfluid-finance/superfluid@1.0.0/ISuperfluidToken",
    "superfluid-finance/superfluid@1.0.0/TokenInfo"
  ],
  "deployedBytecode": "",
  "deployedSourceMap": "",
  "language": "Solidity",
  "natspec": {
    "author": "Superfluid",
    "events": {
      "TokenDowngraded(address,uint256)": {
        "details": "Token downgrade event",
        "params": {
          "account": "Account whose tokens are upgraded",
          "amount": "Amount of tokens downgraded"
        }
      },
      "TokenUpgraded(address,uint256)": {
        "details": "Token upgrade event",
        "params": {
          "account": "Account where tokens are upgraded to",
          "amount": "Amount of tokens upgraded (in 18 decimals)"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "authorizeOperator(address)": {
        "details": "Make an account an operator of the caller. See {isOperatorFor}. Emits an {AuthorizedOperator} event. Requirements - `operator` cannot be calling address."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by an account (`owner`)."
      },
      "burn(uint256,bytes)": {
        "details": "Destroys `amount` tokens from the caller's account, reducing the total supply. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - the caller must have at least `amount` tokens."
      },
      "createAgreement(bytes32,bytes32[])": {
        "details": "Create a new agreement",
        "params": {
          "data": "Agreement data",
          "id": "Agreement ID"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: SuperToken always uses 18 decimals. Note: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "defaultOperators()": {
        "details": "Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false."
      },
      "downgrade(uint256)": {
        "details": "Downgrade SuperToken to ERC20.It will call transfer to send tokens",
        "params": {
          "amount": "Number of tokens to be downgraded"
        }
      },
      "getAccountActiveAgreements(address)": {
        "details": "Get a list of agreements that is active for the accountAn active agreement is one that has state for the account",
        "params": {
          "account": "Account to query"
        },
        "returns": {
          "activeAgreements": "List of accounts that have non-zero states for the account"
        }
      },
      "getAgreementData(address,bytes32,uint256)": {
        "details": "Get data of the agreement",
        "params": {
          "agreementClass": "Contract address of the agreement",
          "id": "Agreement ID"
        },
        "returns": {
          "data": "Data of the agreement"
        }
      },
      "getAgreementStateSlot(address,address,uint256,uint256)": {
        "details": "Get data of the slot of the state of a agreement",
        "params": {
          "account": "Account to query",
          "agreementClass": "Contract address of the agreement",
          "dataLength": "length of the state data",
          "slotId": "slot id of the state"
        }
      },
      "getHost()": {
        "details": "Get superfluid host contract address"
      },
      "getUnderlyingToken()": {
        "details": "Return the underlying token contract",
        "returns": {
          "tokenAddr": "Underlying token address"
        }
      },
      "granularity()": {
        "details": "Returns the smallest part of the token that is not divisible. This means all token operations (creation, movement and destruction) must have amounts that are a multiple of this number. For super token contracts, this value is 1 always"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize(address,uint8,string,string)": {
        "details": "Initialize the contract"
      },
      "isAccountCritical(address,uint256)": {
        "details": "Check if one account is critical",
        "params": {
          "account": "Account check if is critical by a future time",
          "timestamp": "Time of balance"
        },
        "returns": {
          "isCritical": "isCritical"
        }
      },
      "isAccountCriticalNow(address)": {
        "details": "Check if one account is critical now",
        "params": {
          "account": "Account check if is critical by a future time"
        },
        "returns": {
          "isCritical": "isCritical"
        }
      },
      "isAccountSolvent(address,uint256)": {
        "details": "Check if one account is solvent",
        "params": {
          "account": "Account check if is solvent by a future time",
          "timestamp": "Time of balance"
        },
        "returns": {
          "isSolvent": "isSolvent"
        }
      },
      "isAccountSolventNow(address)": {
        "details": "Check if one account is solvent now",
        "params": {
          "account": "Account check if is solvent now"
        },
        "returns": {
          "isSolvent": "isSolvent"
        }
      },
      "isOperatorFor(address,address)": {
        "details": "Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}."
      },
      "makeLiquidationPayouts(bytes32,address,address,uint256,uint256)": {
        "details": "Make liquidation payouts",
        "params": {
          "bailoutAmount": "Amount of account bailout needed NOTE: Liquidation rules:  - If a bailout is required (bailoutAmount > 0)     - the actual reward goes to the liquidator,     - while the reward account becomes the bailout account     - total bailout include: bailout amount + reward amount Modifiers:  - onlyAgreement",
          "id": "Agreement ID",
          "liquidator": "Address of the executer of liquidation",
          "penaltyAccount": "Account of the agreement to be penalized",
          "rewardAmount": "Amount of liquidation reward"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "operationApprove(address,address,uint256)": {
        "details": "Perform ERC20 approve by host contract.",
        "params": {
          "account": "The account owner to be approved.",
          "amount": "Number of tokens to be approved. Modifiers:  - onlyHost",
          "spender": "The spender of account owner's funds."
        }
      },
      "operationDowngrade(address,uint256)": {
        "details": "Downgrade ERC20 to SuperToken by host contract.",
        "params": {
          "account": "The account to be changed.",
          "amount": "Number of tokens to be downgraded (in 18 decimals) Modifiers:  - onlyHost"
        }
      },
      "operationTransferFrom(address,address,address,uint256)": {
        "details": "Perform ERC20 transfer from by host contract.",
        "params": {
          "account": "The account to spend sender's funds.",
          "amount": "Number of tokens to be transferred. Modifiers:  - onlyHost",
          "recipient": "The recipient of thefunds.",
          "spender": "The account where the funds is sent from."
        }
      },
      "operationUpgrade(address,uint256)": {
        "details": "Upgrade ERC20 to SuperToken by host contract.",
        "params": {
          "account": "The account to be changed.",
          "amount": "Number of tokens to be upgraded (in 18 decimals) Modifiers:  - onlyHost"
        }
      },
      "operatorBurn(address,uint256,bytes,bytes)": {
        "details": "Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`."
      },
      "operatorSend(address,address,uint256,bytes,bytes)": {
        "details": "Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface."
      },
      "realtimeBalanceOf(address,uint256)": {
        "details": "Calculate the real balance of a user, taking in consideration all agreements of the account",
        "params": {
          "account": "Account to query",
          "timestamp": "Time of balance"
        },
        "returns": {
          "availableBalance": "Real-time balance",
          "deposit": "Account deposit",
          "owedDeposit": "Account owed Deposit"
        }
      },
      "realtimeBalanceOfNow(address)": {
        "details": "realtimeBalanceOf with timestamp equals to block timestamp"
      },
      "revokeOperator(address)": {
        "details": "Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}. Emits a {RevokedOperator} event. Requirements - `operator` cannot be calling address."
      },
      "selfBurn(address,uint256,bytes)": {
        "details": "Burn existing tokens for the account Modifiers:  - onlySelf"
      },
      "selfMint(address,uint256,bytes)": {
        "details": "Mint new tokens for the account Modifiers:  - onlySelf"
      },
      "send(address,uint256,bytes)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`. If send or receive hooks are registered for the caller and `recipient`, the corresponding functions will be called with `data` and empty `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface."
      },
      "settleBalance(address,int256)": {
        "details": "Settle balance from an account by the agreement.      The agreement needs to make sure that the balance delta is balanced afterwards",
        "params": {
          "account": "Account to query.",
          "delta": "Amount of balance delta to be settled Modifiers:  - onlyAgreement"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "terminateAgreement(bytes32,uint256)": {
        "details": "Close the agreement",
        "params": {
          "id": "Agreement ID"
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferAll(address)": {
        "details": "Transfer all available balance from `msg.sender` to `recipient`"
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "updateAgreementData(bytes32,bytes32[])": {
        "details": "Create a new agreement",
        "params": {
          "data": "Agreement data",
          "id": "Agreement ID"
        }
      },
      "updateAgreementStateSlot(address,uint256,bytes32[])": {
        "details": "Update agreement state slot",
        "params": {
          "account": "Account to be updated NOTE - To clear the storage out, provide zero-ed array of intended length"
        }
      },
      "upgrade(uint256)": {
        "details": "Upgrade ERC20 to SuperToken.",
        "params": {
          "amount": "Number of tokens to be upgraded (in 18 decimals) NOTE: It will use \u00b4transferFrom\u00b4 to get tokens. Before calling this function you should \u00b4approve\u00b4 this contract"
        }
      },
      "upgradeTo(address,uint256,bytes)": {
        "details": "Upgrade ERC20 to SuperToken and transfer immediately",
        "params": {
          "amount": "Number of tokens to be upgraded (in 18 decimals)",
          "data": "User data for the TokensRecipient callback NOTE: It will use \u00b4transferFrom\u00b4 to get tokens. Before calling this function you should \u00b4approve\u00b4 this contract",
          "to": "The account to received upgraded tokens"
        }
      }
    },
    "title": "Superfluid's super token (Superfluid Token + ERC20 + ERC777) interface",
    "version": 1
  },
  "offset": [
    487,
    15564
  ],
  "opcodes": "",
  "pcMap": {},
  "sha1": "26c6db036d70173d7250c9991863c376546d1ab5",
  "source": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\nimport { ISuperfluid } from \"./ISuperfluid.sol\";\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { TokenInfo } from \"../tokens/TokenInfo.sol\";\nimport { IERC777 } from \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Superfluid's super token (Superfluid Token + ERC20 + ERC777) interface\n *\n * @author Superfluid\n */\ninterface ISuperToken is ISuperfluidToken, TokenInfo, IERC20, IERC777 {\n\n    /// @dev Initialize the contract\n    function initialize(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        string calldata n,\n        string calldata s\n    ) external;\n\n    /**************************************************************************\n    * TokenInfo & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view override(IERC777, TokenInfo) returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view override(IERC777, TokenInfo) returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: SuperToken always uses 18 decimals.\n     *\n     * Note: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view override(TokenInfo) returns (uint8);\n\n    /**************************************************************************\n    * ERC20 & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() external view override(IERC777, IERC20) returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address account) external view override(IERC777, IERC20) returns(uint256 balance);\n\n    /**************************************************************************\n    * ERC20\n    *************************************************************************/\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external override(IERC20) view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n     function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n\n    /**************************************************************************\n    * ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     * means all token operations (creation, movement and destruction) must have\n     * amounts that are a multiple of this number.\n     *\n     * For super token contracts, this value is 1 always\n     */\n    function granularity() external view override(IERC777) returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * If send or receive hooks are registered for the caller and `recipient`,\n     * the corresponding functions will be called with `data` and empty\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata data) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external override(IERC777);\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external override(IERC777) view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external override(IERC777) view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**************************************************************************\n     * SuperToken custom token functions\n     *************************************************************************/\n\n    /**\n     * @dev Mint new tokens for the account\n     *\n     * Modifiers:\n     *  - onlySelf\n     */\n    function selfMint(\n        address account,\n        uint256 amount,\n        bytes memory userData\n    ) external;\n\n   /**\n    * @dev Burn existing tokens for the account\n    *\n    * Modifiers:\n    *  - onlySelf\n    */\n   function selfBurn(\n       address account,\n       uint256 amount,\n       bytes memory userData\n   ) external;\n\n    /**************************************************************************\n     * SuperToken extra functions\n     *************************************************************************/\n\n    /**\n     * @dev Transfer all available balance from `msg.sender` to `recipient`\n     */\n    function transferAll(address recipient) external;\n\n    /**************************************************************************\n     * ERC20 wrapping\n     *************************************************************************/\n\n    /**\n     * @dev Return the underlying token contract\n     * @return tokenAddr Underlying token address\n     */\n    function getUnderlyingToken() external view returns(address tokenAddr);\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken.\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     *\n     * NOTE: It will use \u00b4transferFrom\u00b4 to get tokens. Before calling this\n     * function you should \u00b4approve\u00b4 this contract\n     */\n    function upgrade(uint256 amount) external;\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken and transfer immediately\n     * @param to The account to received upgraded tokens\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     * @param data User data for the TokensRecipient callback\n     *\n     * NOTE: It will use \u00b4transferFrom\u00b4 to get tokens. Before calling this\n     * function you should \u00b4approve\u00b4 this contract\n     */\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Token upgrade event\n     * @param account Account where tokens are upgraded to\n     * @param amount Amount of tokens upgraded (in 18 decimals)\n     */\n    event TokenUpgraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**\n     * @dev Downgrade SuperToken to ERC20.\n     * @dev It will call transfer to send tokens\n     * @param amount Number of tokens to be downgraded\n     */\n    function downgrade(uint256 amount) external;\n\n    /**\n     * @dev Token downgrade event\n     * @param account Account whose tokens are upgraded\n     * @param amount Amount of tokens downgraded\n     */\n    event TokenDowngraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**************************************************************************\n    * Batch Operations\n    *************************************************************************/\n\n    /**\n    * @dev Perform ERC20 approve by host contract.\n    * @param account The account owner to be approved.\n    * @param spender The spender of account owner's funds.\n    * @param amount Number of tokens to be approved.\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationApprove(\n        address account,\n        address spender,\n        uint256 amount\n    ) external;\n\n    /**\n    * @dev Perform ERC20 transfer from by host contract.\n    * @param account The account to spend sender's funds.\n    * @param spender  The account where the funds is sent from.\n    * @param recipient The recipient of thefunds.\n    * @param amount Number of tokens to be transferred.\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationTransferFrom(\n        address account,\n        address spender,\n        address recipient,\n        uint256 amount\n    ) external;\n\n    /**\n    * @dev Upgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be upgraded (in 18 decimals)\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationUpgrade(address account, uint256 amount) external;\n\n    /**\n    * @dev Downgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be downgraded (in 18 decimals)\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationDowngrade(address account, uint256 amount) external;\n\n\n    /**************************************************************************\n    * Function modifiers for access control and parameter validations\n    *\n    * While they cannot be explicitly stated in function definitions, they are\n    * listed in function definition comments instead for clarity.\n    *\n    * NOTE: solidity-coverage not supporting it\n    *************************************************************************/\n\n    /// @dev The msg.sender must be the contract itself\n    //modifier onlySelf() virtual\n\n}\n",
  "sourceMap": "",
  "sourcePath": "/Users/vince/.brownie/packages/superfluid-finance/superfluid@1.0.0/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
  "type": "interface"
}